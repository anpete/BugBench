// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using QueryExample.EntityFramework;

namespace BugBench.Migrations
{
    [DbContext(typeof(QueryExampleContext))]
    [Migration("20180410171620_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview3-t000")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QueryExample.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DislikeCount");

                    b.Property<int>("LikeCount");

                    b.Property<int>("QuestId");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("QueryExample.Entities.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1Text")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Answer2Text")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Answer3Text")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Answer4Text")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("AuthorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("QueryExample.Entities.QuestPass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompetitionId");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<decimal>("PointsScored");

                    b.Property<int>("QuestId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("QuestId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestPasses");
                });

            modelBuilder.Entity("QueryExample.Entities.QuestTag", b =>
                {
                    b.Property<int>("QuestId");

                    b.Property<int>("TagId");

                    b.HasKey("QuestId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("QuestTags");
                });

            modelBuilder.Entity("QueryExample.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("QueryExample.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(128);

                    b.Property<string>("Fullname")
                        .HasMaxLength(256);

                    b.Property<bool>("IsEmailConfirmed");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QueryExample.Entities.UserFriend", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("FriendId");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("QueryExample.Entities.Competition", b =>
                {
                    b.HasOne("QueryExample.Entities.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QueryExample.Entities.Quest", b =>
                {
                    b.HasOne("QueryExample.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QueryExample.Entities.QuestPass", b =>
                {
                    b.HasOne("QueryExample.Entities.Competition", "Competition")
                        .WithMany("Passes")
                        .HasForeignKey("CompetitionId");

                    b.HasOne("QueryExample.Entities.Quest", "Quest")
                        .WithMany("Passes")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QueryExample.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QueryExample.Entities.QuestTag", b =>
                {
                    b.HasOne("QueryExample.Entities.Quest", "Quest")
                        .WithMany("QuestTags")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QueryExample.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QueryExample.Entities.UserFriend", b =>
                {
                    b.HasOne("QueryExample.Entities.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QueryExample.Entities.User", "User")
                        .WithMany("UserFriends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
